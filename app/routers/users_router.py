from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer

from app.database.database_helper import db_helper
from app.repositories.auth_router_repo import AuthRepo
from app.repositories.users_db_repo import UserDB
from app.schemas.schemas import (
    SchGetUser,
    SchUpdateUser,
    SchGetAudioFile,
    SchUserChangeResponse,
)
from app.config.logger import get_logger

users_router = APIRouter(tags=["üôç‚Äç‚ôÇÔ∏è users"], prefix="/users")

security = HTTPBearer()
logger = get_logger()


@users_router.get("/get_user_info/")
async def get_user_info(
    user_info: HTTPAuthorizationCredentials = Depends(security),
    session=Depends(db_helper.get_session),
) -> SchGetUser | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = AuthRepo.check_current_user(user_info.credentials)
    user_data = await UserDB.get_user_by_yandex_id(user_info["yandex_id"], session)

    if user_data is None:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Yandex ID {user_info['yandex_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        raise HTTPException(status_code=404, detail="User not found")

    user = SchGetUser.model_validate(user_data)
    logger.info(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å Yandex ID {user_info['yandex_id']} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞."
    )
    return user


@users_router.patch("/change_user/")
async def change_user_info(
    update_data: SchUpdateUser,
    user_info: HTTPAuthorizationCredentials = Depends(security),
    session=Depends(db_helper.get_session),
) -> SchUserChangeResponse:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    logger.info(
        f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å Yandex ID {user_info.credentials}"
    )

    user_info = AuthRepo.check_current_user(user_info.credentials)
    message = await UserDB.change_user(user_info["yandex_id"], update_data, session)

    logger.info(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å Yandex ID {user_info['yandex_id']} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."
    )
    return message


@users_router.get("/get_audios_list/")
async def get_audios_list(
    user_info: HTTPAuthorizationCredentials = Depends(security),
    session=Depends(db_helper.get_session),
) -> list[SchGetAudioFile]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Yandex ID {user_info.credentials}"
    )

    user_info = AuthRepo.check_current_user(user_info.credentials)
    audios_list = await UserDB.get_audios_list(user_info["yandex_id"], session)

    logger.info(
        f"–°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Yandex ID {user_info['yandex_id']} –ø–æ–ª—É—á–µ–Ω."
    )
    return audios_list
